{"mappings":"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","sources":["js/firebaseInitialize.js","node_modules/firebase/app/index.ts","node_modules/@firebase/app/src/platformLoggerService.ts","node_modules/@firebase/app/src/logger.ts","node_modules/@firebase/app/src/constants.ts","node_modules/@firebase/app/src/internal.ts","node_modules/@firebase/app/src/errors.ts","node_modules/@firebase/app/src/firebaseApp.ts","node_modules/@firebase/app/src/api.ts","node_modules/@firebase/app/src/indexeddb.ts","node_modules/@firebase/app/src/heartbeatService.ts","node_modules/@firebase/app/src/registerCoreComponents.ts","node_modules/@firebase/app/src/index.ts","node_modules/@firebase/component/src/component.ts","node_modules/@firebase/component/src/constants.ts","node_modules/@firebase/component/src/provider.ts","node_modules/@firebase/component/src/component_container.ts","node_modules/@firebase/util/src/constants.ts","node_modules/@firebase/util/src/assert.ts","node_modules/@firebase/util/src/crypt.ts","node_modules/@firebase/util/src/deepCopy.ts","node_modules/@firebase/util/src/defaults.ts","node_modules/@firebase/util/src/global.ts","node_modules/@firebase/util/src/deferred.ts","node_modules/@firebase/util/src/emulator.ts","node_modules/@firebase/util/src/environment.ts","node_modules/@firebase/util/src/errors.ts","node_modules/@firebase/util/src/json.ts","node_modules/@firebase/util/src/jwt.ts","node_modules/@firebase/util/src/obj.ts","node_modules/@firebase/util/src/query.ts","node_modules/@firebase/util/src/sha1.ts","node_modules/@firebase/util/src/validation.ts","node_modules/@firebase/util/src/utf8.ts","node_modules/@firebase/util/src/compat.ts","node_modules/process/browser.js","node_modules/@firebase/logger/src/logger.ts","node_modules/idb/build/index.js","node_modules/idb/build/wrap-idb-value.js","node_modules/@firebase/database/src/core/version.ts","node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","node_modules/@firebase/database/src/core/storage/storage.ts","node_modules/@firebase/database/src/core/util/util.ts","node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","node_modules/@firebase/database/src/core/AuthTokenProvider.ts","node_modules/@firebase/database/src/realtime/Constants.ts","node_modules/@firebase/database/src/core/RepoInfo.ts","node_modules/@firebase/database/src/core/stats/StatsCollection.ts","node_modules/@firebase/database/src/core/stats/StatsManager.ts","node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","node_modules/@firebase/database/src/realtime/TransportManager.ts","node_modules/@firebase/database/src/realtime/Connection.ts","node_modules/@firebase/database/src/core/ServerActions.ts","node_modules/@firebase/database/src/core/util/EventEmitter.ts","node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","node_modules/@firebase/database/src/core/util/Path.ts","node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","node_modules/@firebase/database/src/core/PersistentConnection.ts","node_modules/@firebase/database/src/core/snap/Node.ts","node_modules/@firebase/database/src/core/snap/indexes/Index.ts","node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","node_modules/@firebase/database/src/core/util/SortedMap.ts","node_modules/@firebase/database/src/core/snap/comparators.ts","node_modules/@firebase/database/src/core/snap/snap.ts","node_modules/@firebase/database/src/core/snap/LeafNode.ts","node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","node_modules/@firebase/database/src/core/snap/childSet.ts","node_modules/@firebase/database/src/core/snap/IndexMap.ts","node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","node_modules/@firebase/database/src/core/view/Change.ts","node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","node_modules/@firebase/database/src/core/view/QueryParams.ts","node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","node_modules/@firebase/database/src/core/SnapshotHolder.ts","node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","node_modules/@firebase/database/src/core/stats/StatsListener.ts","node_modules/@firebase/database/src/core/stats/StatsReporter.ts","node_modules/@firebase/database/src/core/operation/Operation.ts","node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","node_modules/@firebase/database/src/core/operation/ListenComplete.ts","node_modules/@firebase/database/src/core/operation/Overwrite.ts","node_modules/@firebase/database/src/core/operation/Merge.ts","node_modules/@firebase/database/src/core/view/CacheNode.ts","node_modules/@firebase/database/src/core/view/EventGenerator.ts","node_modules/@firebase/database/src/core/view/ViewCache.ts","node_modules/@firebase/database/src/core/util/ImmutableTree.ts","node_modules/@firebase/database/src/core/CompoundWrite.ts","node_modules/@firebase/database/src/core/WriteTree.ts","node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","node_modules/@firebase/database/src/core/view/ViewProcessor.ts","node_modules/@firebase/database/src/core/view/View.ts","node_modules/@firebase/database/src/core/SyncPoint.ts","node_modules/@firebase/database/src/core/SyncTree.ts","node_modules/@firebase/database/src/core/util/ServerValues.ts","node_modules/@firebase/database/src/core/util/Tree.ts","node_modules/@firebase/database/src/core/util/validation.ts","node_modules/@firebase/database/src/core/view/EventQueue.ts","node_modules/@firebase/database/src/core/Repo.ts","node_modules/@firebase/database/src/core/util/libs/parser.ts","node_modules/@firebase/database/src/core/util/NextPushId.ts","node_modules/@firebase/database/src/core/view/Event.ts","node_modules/@firebase/database/src/core/view/EventRegistration.ts","node_modules/@firebase/database/src/api/Reference_impl.ts","node_modules/@firebase/database/src/api/Database.ts","node_modules/@firebase/database/src/api/ServerValue.ts","node_modules/@firebase/database/src/api/test_access.ts","node_modules/@firebase/database/src/register.ts","node_modules/@firebase/storage/src/implementation/constants.ts","node_modules/@firebase/storage/src/implementation/error.ts","node_modules/@firebase/storage/src/implementation/connection.ts","node_modules/@firebase/storage/src/implementation/location.ts","node_modules/@firebase/storage/src/implementation/failrequest.ts","node_modules/@firebase/storage/src/implementation/type.ts","node_modules/@firebase/storage/src/implementation/url.ts","node_modules/@firebase/storage/src/implementation/utils.ts","node_modules/@firebase/storage/src/implementation/request.ts","node_modules/@firebase/storage/src/implementation/backoff.ts","node_modules/@firebase/storage/src/implementation/fs.ts","node_modules/@firebase/storage/src/platform/browser/base64.ts","node_modules/@firebase/storage/src/implementation/string.ts","node_modules/@firebase/storage/src/implementation/blob.ts","node_modules/@firebase/storage/src/implementation/json.ts","node_modules/@firebase/storage/src/implementation/path.ts","node_modules/@firebase/storage/src/implementation/metadata.ts","node_modules/@firebase/storage/src/implementation/requestinfo.ts","node_modules/@firebase/storage/src/implementation/requests.ts","node_modules/@firebase/storage/src/platform/browser/connection.ts","node_modules/@firebase/storage/src/reference.ts","node_modules/@firebase/storage/src/service.ts","node_modules/@firebase/storage/src/constants.ts","node_modules/@firebase/storage/src/api.ts","node_modules/@firebase/storage/src/index.ts"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, ref, set, child, push, update, increment, get} from \"firebase/database\";\r\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\n\r\nconst configKeys = {\r\n  apiKey: \"AIzaSyAMSlLchU8dx6n34iF5CtR7UNFBdS3Gp4Q\",\r\n  authDomain: \"university-knu-project.firebaseapp.com\",\r\n  projectId: \"university-knu-project\",\r\n  storageBucket: \"university-knu-project.appspot.com\",\r\n  messagingSenderId: \"720296560819\",\r\n  appId: \"1:720296560819:web:72b294689536428ff2c8c6\"\r\n}\r\n\r\nconst firebaseConfig = {\r\n  apiKey: configKeys.apiKey,\r\n  authDomain: configKeys.authDomain,\r\n  projectId: configKeys.projectId,\r\n  storageBucket: configKeys.storageBucket,\r\n  messagingSenderId: configKeys.messagingSenderId,\r\n  appId: configKeys.appId,\r\n  databaseURL: \"https://university-knu-project-default-rtdb.europe-west1.firebasedatabase.app\"\r\n};\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\nconst dataBase = getDatabase(firebaseApp)\r\nconst storage = getStorage(firebaseApp);\r\n\r\nconst getAuthor = (authorFirstName, authorLastName) => get(ref(dataBase, `posts/${authorFirstName?.toString()?.trim()}_${authorLastName?.toString()?.trim()}`))\r\nconst setAuthor = (authorFirstName, authorLastName, email) => set(ref(dataBase, `posts/${authorFirstName?.toString()?.trim()}_${authorLastName?.toString()?.trim()}`), {\r\n  postsAmount: 0,\r\n  email: email\r\n})\r\nconst writePost = ({postName, postCategory, authorName, imageUrl, postMarkup}) => {\r\n  const uid = crypto.randomUUID()\r\n\r\n  const userPost = {\r\n    name: postName ?? `${authorName}_post`,\r\n    category: postCategory ?? `all`,\r\n    imagePreview : imageUrl ?? `https://placehold.co/600x400/png`,\r\n    markup: postMarkup ?? ``,\r\n    uid: uid\r\n  }\r\n\r\n  const newPostKey = push(child(ref(dataBase), `posts/${authorName}/items/${postName?.toString()?.trim()}`)).key;\r\n\r\n  const updates = {};\r\n  updates[`posts/${authorName}/items/${newPostKey}`] = userPost;\r\n  updates[`posts/${authorName}/postsAmount`] = increment(1);\r\n\r\n  return update(ref(dataBase), updates);\r\n}\r\n\r\nconst uploadVisualElement = (file) => {\r\n  const name = +new Date() + \"-\" + file.name;\r\n  const metadata = {\r\n    contentType: file.type\r\n  };\r\n\r\n  const elementReference = storageRef(storage, `images/${name}`)\r\n  return uploadBytes(elementReference, file, metadata).then(snapshot => getDownloadURL(snapshot.ref))\r\n    .then(url => {\r\n      console.log(url);\r\n      alert('element uploaded successfully')\r\n      return url\r\n    })\r\n    .catch((error) => {\r\n      console.error(error)\r\n      alert('element upload failed, will use placeholder')\r\n      return `gs://university-knu-project.appspot.com/images/31343C.svg`\r\n    });\r\n}\r\n\r\nexport {setAuthor, writePost, dataBase, uploadVisualElement, getAuthor}\r\n\r\n\r\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNode } from '@firebase/util';\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { missingPolyFill } from '../../implementation/error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\nexport { StorageError, StorageErrorCode } from './implementation/error';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"],"names":["$7xvHX","parcelRequire","$034262e6ef3b3df9$var$firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","$034262e6ef3b3df9$var$firebaseApp","initializeApp","$034262e6ef3b3df9$export$3ef1e797c6fd78a5","$iJApx","getDatabase","$034262e6ef3b3df9$var$storage","$jceyq","getStorage","$034262e6ef3b3df9$export$31577d79be25397a","authorFirstName","authorLastName","get","ref","toString","trim","$034262e6ef3b3df9$export$ce5b67d0fdc58ee8","email","set","postsAmount","$034262e6ef3b3df9$export$b5004018a1f74696","postName","postCategory","authorName","imageUrl","postMarkup","userPost","name","category","imagePreview","markup","uid","crypto","randomUUID","updates","push","child","key","increment","update","$034262e6ef3b3df9$export$97ecc9da248885a1","file","Date","metadata","contentType","type","elementReference","uploadBytes","then","snapshot","getDownloadURL","url","console","log","alert","catch","error","registerVersion","$57d436074e210fb5$var$PlatformLoggerServiceImpl","constructor","container","this","getPlatformInfoString","getProviders","map","provider","component","getComponent","$57d436074e210fb5$var$isVersionServiceProvider","service","getImmediate","library","version","filter","logString","join","$57d436074e210fb5$var$logger","$5Z2ef","Logger","$57d436074e210fb5$export$9f30fa0c10967f7f","$57d436074e210fb5$var$PLATFORM_LOG_STRING","$57d436074e210fb5$var$name$o","appName","firebase","$57d436074e210fb5$export$b4e3c36c855b14b5","Map","$57d436074e210fb5$export$9566bce3835c0f28","$57d436074e210fb5$export$fa5244b94c62d36a","app","addComponent","e","debug","$57d436074e210fb5$export$c930050e7bb63965","componentName","has","values","$57d436074e210fb5$export$fa0d6da0f5838f50","heartbeatController","getProvider","optional","triggerHeartbeat","$57d436074e210fb5$var$ERRORS","$57d436074e210fb5$var$ERROR_FACTORY","$gMVVg","ErrorFactory","$57d436074e210fb5$var$FirebaseAppImpl","options","config","_isDeleted","_options","Object","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","$eryG9","Component","checkDestroyed","val","isDeleted","create","$57d436074e210fb5$export$31499a9cd224b78c","$57d436074e210fb5$export$c55cfd413944906d","rawConfig","String","getDefaultAppConfig","existingApp","deepEqual","ComponentContainer","newApp","$57d436074e210fb5$export$f9962582c9e66d99","$57d436074e210fb5$export$d29d5299a7137abc","libraryKeyOrName","variant","_a","libraryMismatch","match","versionMismatch","warning","warn","$57d436074e210fb5$var$DB_NAME","$57d436074e210fb5$var$DB_VERSION","$57d436074e210fb5$var$STORE_NAME","$57d436074e210fb5$var$dbPromise","$57d436074e210fb5$var$getDbPromise","$iItpQ","openDB","upgrade","db","oldVersion","createObjectStore","originalErrorMessage","message","async","$57d436074e210fb5$var$writeHeartbeatsToIndexedDB","heartbeatObject","tx","transaction","objectStore","put","$57d436074e210fb5$var$computeKey","done","FirebaseError","idbGetError","$57d436074e210fb5$var$HeartbeatServiceImpl","_heartbeatsCache","_storage","$57d436074e210fb5$var$HeartbeatStorageImpl","_heartbeatsCachePromise","read","result","agent","date","$57d436074e210fb5$var$getUTCDateString","lastSentHeartbeatDate","heartbeats","some","singleDateHeartbeat","hbTimestamp","valueOf","now","overwrite","length","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","$57d436074e210fb5$var$countBytes","pop","$57d436074e210fb5$var$extractHeartbeatsForHeader","headerString","base64urlEncodeWithoutPadding","JSON","stringify","toISOString","substring","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","isIndexedDBAvailable","validateIndexedDBOpenable","$57d436074e210fb5$var$readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","$a83e7ccd68ca8d4e$export$16fa2f45be04daa8","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","$a83e7ccd68ca8d4e$var$DEFAULT_ENTRY_NAME","$a83e7ccd68ca8d4e$export$2881499e37b75b9a","instances","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","deferred","Deferred","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","promise","Error","setComponent","$a83e7ccd68ca8d4e$var$isComponentEager","instanceDeferred","entries","clearInstance","delete","services","Array","from","Promise","all","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","undefined","$a83e7ccd68ca8d4e$export$436a80eea5d5c0c5","providers","addOrOverwriteComponent","$hPtJY","$c38e0f42709c826a$export$588c7fdda06fbb0a","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","$c38e0f42709c826a$export$a7a9523472993e97","assertion","$c38e0f42709c826a$export$a39cad550e7ab28a","stringToByteArray","str","out","p","i","c","charCodeAt","$c38e0f42709c826a$export$b3b2de96497acc47","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","bytes","pos","c1","fromCharCode","c2","u","c3","$c38e0f42709c826a$var$byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","$c38e0f42709c826a$export$55ca9d4bee46aeb3","$c38e0f42709c826a$export$e510a73ee562749","utf8Bytes","$c38e0f42709c826a$export$4b5284a3025a455","replace","$c38e0f42709c826a$export$c62426fdd000a97e","$c38e0f42709c826a$export$6c40052bed430212","value","$c38e0f42709c826a$export$54e9fb29908872fa","target","source","getTime","prop","hasOwnProperty","$c38e0f42709c826a$var$getDefaultsFromGlobal","self","window","$parcel$global","$c38e0f42709c826a$export$a4e55266d2135a7f","__FIREBASE_DEFAULTS__","$c38e0f42709c826a$export$212bb2fc580a90a8","env","$c38e0f42709c826a$var$getDefaultsFromEnvVariable","document","cookie","decoded","parse","$c38e0f42709c826a$var$getDefaultsFromCookie","info","$c38e0f42709c826a$export$a3febcf1f14a3a0c","productName","host","_b","emulatorHosts","$c38e0f42709c826a$export$9c11895284c8adad","separatorIndex","lastIndexOf","port","parseInt","$c38e0f42709c826a$export$3dfb6827a9f89756","$c38e0f42709c826a$export$85f6557964517f1a","reject","wrapCallback","$c38e0f42709c826a$export$367bf224123348f1","token","project","iat","sub","user_id","payload","iss","aud","exp","auth_time","sign_in_provider","identities","alg","$c38e0f42709c826a$export$c36915b22ce77c19","navigator","$c38e0f42709c826a$export$872f8323f01d7ae0","test","$c38e0f42709c826a$export$8ee0fc9ee280b4ee","forceEnvironment","prototype","call","process","$c38e0f42709c826a$export$f7a1e23e542d38e3","$c38e0f42709c826a$export$5d1d834fbbf8bab7","$c38e0f42709c826a$export$3865db50535c2055","indexedDB","$c38e0f42709c826a$export$a8a3018f3d187a4d","preExist","DB_CHECK_NAME","request","open","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","$c38e0f42709c826a$export$dd24e9cd51226c56","code","customData","super","setPrototypeOf","captureStackTrace","$c38e0f42709c826a$export$3fa6e1b18a3b2d40","serviceName","errors","data","fullCode","template","$c38e0f42709c826a$var$PATTERN","_","$c38e0f42709c826a$var$replaceTemplate","fullMessage","$c38e0f42709c826a$export$c5a53ce6a17cf18d","$c38e0f42709c826a$export$fac44ee5b035f737","$c38e0f42709c826a$export$2f872c0f2117be69","header","claims","signature","parts","split","$c38e0f42709c826a$export$9565ca3d387f8aa0","$c38e0f42709c826a$export$fc970ed23da99565","$c38e0f42709c826a$export$2344b14b097df817","obj","$c38e0f42709c826a$export$e51ae4db7b428f67","$c38e0f42709c826a$export$dd1bc94b04021eeb","$c38e0f42709c826a$export$871de8747c9eaa88","fn","contextObj","res","$c38e0f42709c826a$export$9cb4719e2e525b7a","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","$c38e0f42709c826a$var$isObject","thing","$c38e0f42709c826a$export$ac4103b836844853","querystringParams","params","forEach","arrayVal","encodeURIComponent","$c38e0f42709c826a$export$c85d589bf4e25fef","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","lengthMinusBlock","n","inbuf","digest","totalBits","j","$c38e0f42709c826a$export$adea4917e02d93dc","fnName","argName","$c38e0f42709c826a$export$655666783217a925","high","$c38e0f42709c826a$export$9536dc0a75b20bf9","$c38e0f42709c826a$export$4befe9b5fa509a1b","_delegate","$cfae44f0dfdf62c0$var$cachedSetTimeout","$cfae44f0dfdf62c0$var$cachedClearTimeout","$cfae44f0dfdf62c0$var$process","module","exports","$cfae44f0dfdf62c0$var$defaultSetTimout","$cfae44f0dfdf62c0$var$defaultClearTimeout","$cfae44f0dfdf62c0$var$runTimeout","fun","setTimeout","clearTimeout","$cfae44f0dfdf62c0$var$currentQueue","$cfae44f0dfdf62c0$var$queue","$cfae44f0dfdf62c0$var$draining","$cfae44f0dfdf62c0$var$queueIndex","$cfae44f0dfdf62c0$var$cleanUpNextTick","concat","$cfae44f0dfdf62c0$var$drainQueue","timeout","len","run","marker","$cfae44f0dfdf62c0$var$runClearTimeout","$cfae44f0dfdf62c0$var$Item","array","$cfae44f0dfdf62c0$var$noop","nextTick","args","arguments","apply","title","browser","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","$45b460d9de9b230f$var$instances","$45b460d9de9b230f$export$243e62d78d3b544d","LogLevel","$45b460d9de9b230f$var$levelStringToEnum","DEBUG","verbose","VERBOSE","INFO","WARN","ERROR","silent","SILENT","$45b460d9de9b230f$var$defaultLogLevel","$45b460d9de9b230f$var$ConsoleMethod","$45b460d9de9b230f$var$defaultLogHandler","logType","logLevel","method","$45b460d9de9b230f$export$efa9a398d6368992","_logLevel","_logHandler","_userLogHandler","TypeError","setLogLevel","logHandler","userLogHandler","$45b460d9de9b230f$export$c622e99c0ce7b1c9","level","inst","$45b460d9de9b230f$export$29577d29c84db5f6","logCallback","customLogLevel","arg","ignored","toLowerCase","$jMRra","$da032767b57a4aa4$export$ca0ed41b1a2af7e","blocked","blocking","terminated","openPromise","w","addEventListener","event","newVersion","$da032767b57a4aa4$var$readMethods","$da032767b57a4aa4$var$writeMethods","$da032767b57a4aa4$var$cachedMethods","$da032767b57a4aa4$var$getMethod","IDBDatabase","targetFuncName","useIndex","isWrite","IDBIndex","IDBObjectStore","storeName","store","index","shift","r","oldTraps","receiver","$e67bf383372d72f4$export$23f2a1d2818174ef","object","constructors","$e67bf383372d72f4$var$idbProxyableTypes","$e67bf383372d72f4$var$cursorAdvanceMethods","$e67bf383372d72f4$var$cursorRequestMap","WeakMap","$e67bf383372d72f4$var$transactionDoneMap","$e67bf383372d72f4$var$transactionStoreNamesMap","$e67bf383372d72f4$var$transformCache","$e67bf383372d72f4$export$407448d2b89b1813","$e67bf383372d72f4$var$idbProxyTraps","IDBTransaction","objectStoreNames","$e67bf383372d72f4$export$efccba1c4a2ef57b","$e67bf383372d72f4$export$43caf9889c228507","$e67bf383372d72f4$var$wrapFunction","func","IDBCursor","advance","continue","continuePrimaryKey","$e67bf383372d72f4$export$3b14a55fb2447963","storeNames","sort","$e67bf383372d72f4$var$transformCachableValue","unlisten","removeEventListener","complete","DOMException","$e67bf383372d72f4$var$cacheDonePromiseForTransaction","Proxy","IDBRequest","success","$e67bf383372d72f4$var$promisifyRequest","newValue","$da38ac6aa733c404$var$SDK_VERSION","$da38ac6aa733c404$var$DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","jsonEval","remove","$da38ac6aa733c404$var$MemoryStorage","cache_","isInMemoryStorage","contains","$da38ac6aa733c404$var$createStoragefor","domStorageName","domStorage","$da38ac6aa733c404$var$PersistentStorage","$da38ac6aa733c404$var$SessionStorage","$da38ac6aa733c404$var$logClient","$da38ac6aa733c404$var$LUIDGenerator","id","$da38ac6aa733c404$var$sha1","sha1","Sha1","sha1Bytes","base64","$da38ac6aa733c404$var$buildLogMessage_","varArgs","$da38ac6aa733c404$var$logger","$da38ac6aa733c404$var$firstLog_","enableLogging","logger_","persistent","assert","bind","$da38ac6aa733c404$var$log","$da38ac6aa733c404$var$logWrapper","prefix","$da38ac6aa733c404$var$error","$da38ac6aa733c404$var$fatal","$da38ac6aa733c404$var$warn","$da38ac6aa733c404$var$isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","$da38ac6aa733c404$var$MIN_NAME","$da38ac6aa733c404$var$MAX_NAME","$da38ac6aa733c404$var$nameCompare","aAsInt","$da38ac6aa733c404$var$tryParseInt","bAsInt","$da38ac6aa733c404$var$stringCompare","$da38ac6aa733c404$var$requireKey","$da38ac6aa733c404$var$ObjectToUniqueKey","$da38ac6aa733c404$var$splitStringBySize","segsize","dataSegs","$da38ac6aa733c404$var$each","$da38ac6aa733c404$var$doubleToIEEE754String","v","bias","s","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","substr","$da38ac6aa733c404$var$INTEGER_REGEXP_","RegExp","intVal","$da38ac6aa733c404$var$exceptionGuard","stack","$da38ac6aa733c404$var$setTimeoutNonBlocking","time","Deno","unrefTimer","$da38ac6aa733c404$var$AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","$da38ac6aa733c404$var$FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","$da38ac6aa733c404$var$EmulatorTokenProvider","accessToken","OWNER","$da38ac6aa733c404$var$PROTOCOL_VERSION","$da38ac6aa733c404$var$FORGE_DOMAIN_RE","$da38ac6aa733c404$var$APP_CHECK_TOKEN_PARAM","$da38ac6aa733c404$var$WEBSOCKET","$da38ac6aa733c404$var$LONG_POLLING","$da38ac6aa733c404$var$RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","$da38ac6aa733c404$var$repoInfoConnectionURL","repoInfo","connURL","$da38ac6aa733c404$var$repoInfoNeedsQueryParam","pairs","$da38ac6aa733c404$var$StatsCollection","counters_","incrementCounter","amount","deepCopy","$da38ac6aa733c404$var$collections","$da38ac6aa733c404$var$reporters","$da38ac6aa733c404$var$statsManagerGetCollection","hashString","$da38ac6aa733c404$var$PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","$da38ac6aa733c404$var$FIREBASE_LONGPOLL_START_PARAM","$da38ac6aa733c404$var$BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","readyState","called","wrappedFn","body","attachEvent","$da38ac6aa733c404$var$executeWhenDOMReady","scriptTagHolder","$da38ac6aa733c404$var$FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","$da38ac6aa733c404$var$MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","$da38ac6aa733c404$var$WebSocketImpl","MozWebSocket","WebSocket","$da38ac6aa733c404$var$WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","platform","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","$da38ac6aa733c404$var$TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","$da38ac6aa733c404$var$Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","$da38ac6aa733c404$var$ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","$da38ac6aa733c404$var$EventEmitter","allowedEvents_","listeners_","trigger","eventType","context","validateEventType_","eventData","getInitialEvent","splice","et","$da38ac6aa733c404$var$OnlineMonitor","online_","isMobileCordova","currentlyOnline","$da38ac6aa733c404$var$MAX_PATH_DEPTH","$da38ac6aa733c404$var$MAX_PATH_LENGTH_BYTES","$da38ac6aa733c404$var$Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","$da38ac6aa733c404$var$newEmptyPath","$da38ac6aa733c404$var$pathGetFront","path","$da38ac6aa733c404$var$pathGetLength","$da38ac6aa733c404$var$pathPopFront","$da38ac6aa733c404$var$pathGetBack","$da38ac6aa733c404$var$pathSlice","begin","$da38ac6aa733c404$var$pathParent","pieces","$da38ac6aa733c404$var$pathChild","childPathObj","childPieces","$da38ac6aa733c404$var$pathIsEmpty","$da38ac6aa733c404$var$newRelativePath","outerPath","innerPath","outer","inner","$da38ac6aa733c404$var$pathCompare","left","right","leftKeys","rightKeys","cmp","$da38ac6aa733c404$var$pathEquals","other","$da38ac6aa733c404$var$pathContains","$da38ac6aa733c404$var$ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","$da38ac6aa733c404$var$validationPathCheckValid","validationPath","$da38ac6aa733c404$var$validationPathToErrorString","$da38ac6aa733c404$var$VisibilityMonitor","hidden","visibilityChange","visible_","visible","$da38ac6aa733c404$var$RECONNECT_MIN_DELAY","$da38ac6aa733c404$var$PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","initConnection_","outstandingGet","_path","q","_queryObject","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","isEmpty","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","isReactNative","$da38ac6aa733c404$var$NamedNode","node","$da38ac6aa733c404$var$Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","$da38ac6aa733c404$var$__EMPTY_NODE","$da38ac6aa733c404$var$KeyIndex","__EMPTY_NODE","isDefinedOn","assertionError","maxPost","makePost","indexValue","$da38ac6aa733c404$var$KEY_INDEX","$da38ac6aa733c404$var$SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","$da38ac6aa733c404$var$LLRBNode","color","RED","$da38ac6aa733c404$var$SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","$da38ac6aa733c404$var$NAME_ONLY_COMPARATOR","$da38ac6aa733c404$var$NAME_COMPARATOR","MAX_NODE","$da38ac6aa733c404$var$priorityHashText","priority","$da38ac6aa733c404$var$validatePriorityNode","priorityNode","isLeafNode","getPriority","$da38ac6aa733c404$var$__childrenNodeConstructor","nodeFromJSON","$da38ac6aa733c404$var$LeafNode","value_","priorityNode_","__childrenNodeConstructor","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","$da38ac6aa733c404$var$PRIORITY_INDEX","aPriority","bPriority","indexCmp","$da38ac6aa733c404$var$LOG_2","$da38ac6aa733c404$var$Base12Num","num","current_","mask","bits_","nextBitIsOne","$da38ac6aa733c404$var$buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","$da38ac6aa733c404$var$_defaultIndexMap","$da38ac6aa733c404$var$fallbackObject","$da38ac6aa733c404$var$IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","$da38ac6aa733c404$var$EMPTY_NODE","$da38ac6aa733c404$var$ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","INTEGER_REGEXP_","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","$da38ac6aa733c404$var$MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setPriorityMaxNode","$da38ac6aa733c404$var$USE_HINZE","$da38ac6aa733c404$var$nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","$da38ac6aa733c404$var$setNodeFromJSON","$da38ac6aa733c404$var$PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","$da38ac6aa733c404$var$VALUE_INDEX","$da38ac6aa733c404$var$changeValue","snapshotNode","$da38ac6aa733c404$var$changeChildAdded","$da38ac6aa733c404$var$changeChildRemoved","$da38ac6aa733c404$var$changeChildChanged","oldSnap","$da38ac6aa733c404$var$IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","$da38ac6aa733c404$var$RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","$da38ac6aa733c404$var$LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","$da38ac6aa733c404$export$7ba287e361c94330","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","$da38ac6aa733c404$var$queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","startParam","endParam","$da38ac6aa733c404$var$queryParamsGetQueryObject","viewFrom","$da38ac6aa733c404$var$ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystring","xhr","XMLHttpRequest","responseText","$da38ac6aa733c404$var$SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","$da38ac6aa733c404$var$newSparseSnapshotTree","$da38ac6aa733c404$var$sparseSnapshotTreeRemember","sparseSnapshotTree","clear","$da38ac6aa733c404$var$sparseSnapshotTreeForEachTree","prefixPath","tree","$da38ac6aa733c404$var$sparseSnapshotTreeForEachChild","$da38ac6aa733c404$var$StatsListener","collection_","last_","newStats","stat","$da38ac6aa733c404$var$StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","$da38ac6aa733c404$var$OperationType","OperationType","$da38ac6aa733c404$var$newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","$da38ac6aa733c404$var$AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","$da38ac6aa733c404$var$ListenComplete","LISTEN_COMPLETE","$da38ac6aa733c404$var$Overwrite","OVERWRITE","$da38ac6aa733c404$var$Merge","MERGE","$da38ac6aa733c404$var$CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","$da38ac6aa733c404$var$EventGenerator","query_","$da38ac6aa733c404$var$eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","$da38ac6aa733c404$var$eventGeneratorCompareChanges","materializedChange","prevName","$da38ac6aa733c404$var$eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","$da38ac6aa733c404$var$newViewCache","serverCache","$da38ac6aa733c404$var$viewCacheUpdateEventSnap","viewCache","eventSnap","$da38ac6aa733c404$var$viewCacheUpdateServerSnap","serverSnap","$da38ac6aa733c404$var$viewCacheGetCompleteEventSnap","$da38ac6aa733c404$var$viewCacheGetCompleteServerSnap","$da38ac6aa733c404$var$emptyChildrenSingleton","$da38ac6aa733c404$var$ImmutableTree","$da38ac6aa733c404$var$EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","$da38ac6aa733c404$var$CompoundWrite","writeTree_","$da38ac6aa733c404$var$compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","$da38ac6aa733c404$var$compoundWriteAddWrites","newWrite","$da38ac6aa733c404$var$compoundWriteRemoveWrite","empty","$da38ac6aa733c404$var$compoundWriteHasCompleteWrite","$da38ac6aa733c404$var$compoundWriteGetCompleteNode","$da38ac6aa733c404$var$compoundWriteGetCompleteChildren","$da38ac6aa733c404$var$compoundWriteChildCompoundWrite","shadowingNode","$da38ac6aa733c404$var$compoundWriteIsEmpty","$da38ac6aa733c404$var$compoundWriteApply","$da38ac6aa733c404$var$applySubtreeWrite","writeTree","priorityWrite","$da38ac6aa733c404$var$writeTreeChildWrites","$da38ac6aa733c404$var$newWriteTreeRef","$da38ac6aa733c404$var$writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","$da38ac6aa733c404$var$writeTreeRecordContainsPath_","visibleWrites","$da38ac6aa733c404$var$writeTreeLayerTree_","$da38ac6aa733c404$var$writeTreeDefaultFilter_","lastWriteId","$da38ac6aa733c404$var$writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","$da38ac6aa733c404$var$writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","$da38ac6aa733c404$var$writeTreeRefCalcCompleteEventCache","writeTreeRef","$da38ac6aa733c404$var$writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","$da38ac6aa733c404$var$writeTreeCalcCompleteEventChildren","$da38ac6aa733c404$var$writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","$da38ac6aa733c404$var$writeTreeCalcEventCacheAfterServerOverwrite","$da38ac6aa733c404$var$writeTreeRefShadowingWrite","$da38ac6aa733c404$var$writeTreeShadowingWrite","$da38ac6aa733c404$var$writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","$da38ac6aa733c404$var$writeTreeCalcIndexedSlice","$da38ac6aa733c404$var$writeTreeRefCalcCompleteChild","existingServerCache","$da38ac6aa733c404$var$writeTreeCalcCompleteChild","$da38ac6aa733c404$var$writeTreeRefChild","$da38ac6aa733c404$var$ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","$da38ac6aa733c404$var$NO_COMPLETE_CHILD_SOURCE","getCompleteChild","$da38ac6aa733c404$var$WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","$da38ac6aa733c404$var$viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","newViewCache","filterServerNode","$da38ac6aa733c404$var$viewProcessorApplyUserOverwrite","$da38ac6aa733c404$var$viewProcessorApplyServerOverwrite","changedChildren","curViewCache","$da38ac6aa733c404$var$viewProcessorCacheHasChild","$da38ac6aa733c404$var$viewProcessorApplyUserMerge","$da38ac6aa733c404$var$viewProcessorApplyServerMerge","ackUserWrite","serverChildren","$da38ac6aa733c404$var$viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","$da38ac6aa733c404$var$viewProcessorAckUserWrite","oldServerNode","$da38ac6aa733c404$var$viewProcessorGenerateEventCacheAfterServerEvent","$da38ac6aa733c404$var$viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","$da38ac6aa733c404$var$viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","$da38ac6aa733c404$var$viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","$da38ac6aa733c404$var$View","initialViewCache","eventRegistrations_","indexFilter","processor_","$da38ac6aa733c404$var$newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","$da38ac6aa733c404$var$viewGetCompleteServerCache","view","cache","$da38ac6aa733c404$var$viewIsEmpty","$da38ac6aa733c404$var$viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","$da38ac6aa733c404$var$viewApplyOperation","$da38ac6aa733c404$var$viewGenerateEventsForChanges_","eventRegistrations","moves","$da38ac6aa733c404$var$eventGeneratorGenerateEventsForChanges","referenceConstructor","$da38ac6aa733c404$var$referenceConstructor","$da38ac6aa733c404$var$SyncPoint","views","$da38ac6aa733c404$var$syncPointApplyOperation","syncPoint","optCompleteServerCache","$da38ac6aa733c404$var$syncPointGetView","serverCacheComplete","eventCacheComplete","$da38ac6aa733c404$var$syncPointAddEventRegistration","$da38ac6aa733c404$var$viewAddEventRegistration","initialChanges","$da38ac6aa733c404$var$viewGetInitialEvents","$da38ac6aa733c404$var$syncPointRemoveEventRegistration","removed","hadCompleteView","$da38ac6aa733c404$var$syncPointHasCompleteView","viewQueryId","_repo","$da38ac6aa733c404$var$syncPointGetQueryViews","$da38ac6aa733c404$var$syncPointGetCompleteServerCache","$da38ac6aa733c404$var$syncPointViewForQuery","$da38ac6aa733c404$var$syncPointGetCompleteView","$da38ac6aa733c404$var$syncPointViewExistsForQuery","$da38ac6aa733c404$var$syncTreeNextQueryTag_","$da38ac6aa733c404$var$SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","$da38ac6aa733c404$var$syncTreeApplyUserOverwrite","syncTree","newData","$da38ac6aa733c404$var$writeTreeAddOverwrite","$da38ac6aa733c404$var$syncTreeApplyOperationToSyncPoints_","$da38ac6aa733c404$var$syncTreeApplyUserMerge","$da38ac6aa733c404$var$writeTreeAddMerge","changeTree","fromObject","$da38ac6aa733c404$var$syncTreeAckUserWrite","record","$da38ac6aa733c404$var$writeTreeGetWrite","$da38ac6aa733c404$var$syncTreeApplyServerOverwrite","$da38ac6aa733c404$var$syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","$da38ac6aa733c404$var$syncTreeCollectDistinctViewsForSubTree_","newQuery","$da38ac6aa733c404$var$syncTreeCreateListenerForView_","startListening","$da38ac6aa733c404$var$syncTreeQueryForListening_","$da38ac6aa733c404$var$syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","$da38ac6aa733c404$var$syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","$da38ac6aa733c404$var$syncTreeRemoveTags_","$da38ac6aa733c404$var$syncTreeApplyTaggedQueryOverwrite","queryKey","$da38ac6aa733c404$var$syncTreeQueryKeyForTag_","$da38ac6aa733c404$var$syncTreeParseQueryKey_","queryPath","$da38ac6aa733c404$var$syncTreeApplyTaggedOperation_","$da38ac6aa733c404$var$syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queriesToStop","childQueries","queryToStop","$da38ac6aa733c404$var$syncTreeSetupListener_","$da38ac6aa733c404$var$syncTreeCalcCompleteEventCache","$da38ac6aa733c404$var$syncTreeGetServerValue","serverCacheNode","$da38ac6aa733c404$var$viewGetCompleteNode","$da38ac6aa733c404$var$syncTreeApplyOperationHelper_","syncPointTree","$da38ac6aa733c404$var$syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","$da38ac6aa733c404$var$viewGetServerCache","$da38ac6aa733c404$var$syncTreeApplyTaggedListenComplete","$da38ac6aa733c404$var$syncTreeApplyListenComplete","toUpperCase","$da38ac6aa733c404$var$errorForServerCode","splitIndex","$da38ac6aa733c404$var$ExistingValueProvider","$da38ac6aa733c404$var$DeferredValueProvider","syncTree_","path_","$da38ac6aa733c404$var$generateWithValues","$da38ac6aa733c404$var$resolveDeferredLeafValue","existingVal","serverValues","$da38ac6aa733c404$var$resolveScalarDeferredValue","$da38ac6aa733c404$var$resolveComplexDeferredValue","op","unused","existingNode","$da38ac6aa733c404$var$resolveDeferredValueTree","$da38ac6aa733c404$var$resolveDeferredValue","$da38ac6aa733c404$var$resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","$da38ac6aa733c404$var$Tree","parent","childCount","$da38ac6aa733c404$var$treeSubTree","pathObj","$da38ac6aa733c404$var$treeGetValue","$da38ac6aa733c404$var$treeSetValue","$da38ac6aa733c404$var$treeUpdateParents","$da38ac6aa733c404$var$treeHasChildren","$da38ac6aa733c404$var$treeForEachChild","$da38ac6aa733c404$var$treeForEachDescendant","includeSelf","childrenFirst","$da38ac6aa733c404$var$treeGetPath","childEmpty","$da38ac6aa733c404$var$treeIsEmpty","childExists","$da38ac6aa733c404$var$treeUpdateChild","$da38ac6aa733c404$var$INVALID_KEY_REGEX_","$da38ac6aa733c404$var$INVALID_PATH_REGEX_","$da38ac6aa733c404$var$MAX_LEAF_SIZE_","$da38ac6aa733c404$var$isValidKey","$da38ac6aa733c404$var$isValidPathString","$da38ac6aa733c404$var$isValidPriority","$da38ac6aa733c404$var$validateFirebaseDataArg","$da38ac6aa733c404$var$validateFirebaseData","errorPrefixFxn","errorPrefix","hasDotValue","hasActualChild","last","$da38ac6aa733c404$var$validationPathPop","$da38ac6aa733c404$var$validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","$da38ac6aa733c404$var$validateFirebaseMergePaths","$da38ac6aa733c404$export$8637b026ace8abb1","argumentName","$da38ac6aa733c404$var$validateRootPathString","$da38ac6aa733c404$export$8d83036122ae444e","$da38ac6aa733c404$var$validateUrl","parsedUrl","$da38ac6aa733c404$var$isValidRootPathString","$da38ac6aa733c404$var$EventQueue","eventLists_","recursionDepth_","$da38ac6aa733c404$var$eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","$da38ac6aa733c404$var$eventQueueRaiseEventsForChangedPath","changedPath","$da38ac6aa733c404$var$eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","sentAll","eventList","$da38ac6aa733c404$var$eventListRaise","eventFn","getEventRunner","$da38ac6aa733c404$var$INTERRUPT_REASON","$da38ac6aa733c404$var$MAX_TRANSACTION_RETRIES","$da38ac6aa733c404$var$Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","$da38ac6aa733c404$var$repoStart","repo","authOverride","search","isMerge","$da38ac6aa733c404$var$repoOnDataUpdate","$da38ac6aa733c404$var$repoOnConnectStatus","connectStatus","$da38ac6aa733c404$var$repoUpdateInfo","$da38ac6aa733c404$var$repoOnServerInfoUpdate","statsReporter_","creatorFunction","$da38ac6aa733c404$var$statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","$da38ac6aa733c404$var$repoServerTime","$da38ac6aa733c404$var$repoGenerateServerValues","taggedChildren","raw","$da38ac6aa733c404$var$syncTreeApplyTaggedQueryMerge","taggedSnap","$da38ac6aa733c404$var$syncTreeApplyServerMerge","$da38ac6aa733c404$var$repoRerunTransactions","$da38ac6aa733c404$var$repoLog","resolvedOnDisconnectTree","resolved","$da38ac6aa733c404$var$repoAbortTransactions","$da38ac6aa733c404$var$repoRunOnDisconnectEvents","$da38ac6aa733c404$var$repoGetNextWriteId","$da38ac6aa733c404$var$repoSetWithPriority","newVal","newNodeUnresolved","clearEvents","$da38ac6aa733c404$var$repoCallOnCompleteCallback","$da38ac6aa733c404$var$repoInterrupt","$da38ac6aa733c404$var$repoGetLatestState","excludeSets","$da38ac6aa733c404$var$repoSendReadyTransactions","$da38ac6aa733c404$var$repoPruneCompletedTransactionsBelowNode","queue","$da38ac6aa733c404$var$repoBuildTransactionQueue","every","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","$da38ac6aa733c404$var$repoSendTransactionQueue","rootMostTransactionNode","$da38ac6aa733c404$var$repoGetAncestorTransactionNode","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","$da38ac6aa733c404$var$repoRerunTransactionQueue","transactionNode","transactionQueue","$da38ac6aa733c404$var$repoAggregateTransactionQueuesForNode","order","nodeQueue","to","$da38ac6aa733c404$var$treeForEachAncestor","$da38ac6aa733c404$var$repoAbortTransactionsOnNode","lastSent","$da38ac6aa733c404$var$parseRepoInfo","dataURL","$da38ac6aa733c404$var$parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","$da38ac6aa733c404$var$decodePath","queryString","results","segment","kv","$da38ac6aa733c404$var$decodeQuery","hostWithoutPort","dotInd","$da38ac6aa733c404$var$PUSH_CHARS","$da38ac6aa733c404$var$nextPushId","lastPushTime","lastRandChars","duplicateTime","timeStampChars","$da38ac6aa733c404$var$DataEvent","getEventType","exportVal","$da38ac6aa733c404$var$CancelEvent","$da38ac6aa733c404$var$CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","$da38ac6aa733c404$export$e79c8d837d2220a8","_orderByCalled","$da38ac6aa733c404$export$35c3a5e7c9d1033c","isEqual","getModularInstance","sameRepo","samePath","sameQueryIdentifier","toJSON","$da38ac6aa733c404$var$pathToUrlEncodedString","parentPath","$da38ac6aa733c404$export$80b98bcbc246c942","_node","_index","childRef","$da38ac6aa733c404$export$f9574b70e1d95d9d","exists","hasChildren","$da38ac6aa733c404$export$eff4d24c3ff7876e","_checkNotDeleted","_root","$da38ac6aa733c404$export$4cbf152802aa238","thennablePushRef","pushRef","$da38ac6aa733c404$export$adaa4cf7ef1b65be","$da38ac6aa733c404$export$722fbec263ad908a","childrenToMerge","changedKey","changedValue","$da38ac6aa733c404$var$repoUpdate","$da38ac6aa733c404$export$3988ae62b71be9a3","callbackContext","$da38ac6aa733c404$var$ValueEventRegistration","cached","err","$da38ac6aa733c404$var$repoGetValue","$da38ac6aa733c404$var$syncPointSetReferenceConstructor","$da38ac6aa733c404$var$syncTreeSetReferenceConstructor","$da38ac6aa733c404$var$FIREBASE_DATABASE_EMULATOR_HOST_VAR","$da38ac6aa733c404$var$repos","$da38ac6aa733c404$var$useRestClient","$da38ac6aa733c404$export$a248c1d2ea757674","authProvider","dbUrl","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","$da38ac6aa733c404$var$repoManagerCreateRepo","$da38ac6aa733c404$export$6feb5ea51a7b0b47","_repoInternal","_instanceStarted","_rootInternal","$da38ac6aa733c404$var$repoManagerDeleteRepo","apiName","$da38ac6aa733c404$export$d0dd861204d0bf72","getApp","_getProvider","emulator","getDefaultEmulatorHostnameAndPort","tokenProvider","mockUserToken","createMockUserToken","$da38ac6aa733c404$var$repoManagerApplyEmulatorSettings","$da38ac6aa733c404$export$87f3cfc4a2e3958d","$da38ac6aa733c404$export$a2647aa13413c947","simpleListen","echo","onEcho","_registerComponent","$da38ac6aa733c404$var$name","$da38ac6aa733c404$var$version","$df9a6d7fd06616c9$var$DEFAULT_HOST","$df9a6d7fd06616c9$var$CONFIG_STORAGE_BUCKET_KEY","$df9a6d7fd06616c9$export$697502632950e9d3","status_","$df9a6d7fd06616c9$var$prependCode","serverResponse","_baseMessage","_codeEquals","$df9a6d7fd06616c9$export$54592d666d6ce114","StorageErrorCode","$df9a6d7fd06616c9$var$ErrorCode","ErrorCode","$df9a6d7fd06616c9$var$unknown","UNKNOWN","$df9a6d7fd06616c9$var$retryLimitExceeded","RETRY_LIMIT_EXCEEDED","$df9a6d7fd06616c9$var$canceled","CANCELED","$df9a6d7fd06616c9$var$cannotSliceBlob","CANNOT_SLICE_BLOB","$df9a6d7fd06616c9$export$8f74d9881d1936fd","INVALID_ARGUMENT","$df9a6d7fd06616c9$var$appDeleted","APP_DELETED","$df9a6d7fd06616c9$var$invalidFormat","format","INVALID_FORMAT","$df9a6d7fd06616c9$var$internalError","INTERNAL_ERROR","$df9a6d7fd06616c9$export$adb98fff6714334","bucket","isRoot","fullServerUrl","encode","bucketOnlyServerUrl","bucketString","bucketLocation","makeFromUrl","INVALID_DEFAULT_BUCKET","bucketDomain","gsRegex","httpModify","loc","firebaseStorageHost","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","INVALID_URL","$df9a6d7fd06616c9$var$invalidUrl","$df9a6d7fd06616c9$var$FailRequest","promise_","getPromise","cancel","_appDelete","$df9a6d7fd06616c9$var$isString","$df9a6d7fd06616c9$var$isNativeBlob","$df9a6d7fd06616c9$var$isNativeBlobDefined","Blob","isNode","$df9a6d7fd06616c9$var$validateNumber","argument","minValue","maxValue","$df9a6d7fd06616c9$var$makeUrl","urlPart","$df9a6d7fd06616c9$var$makeQueryString","queryPart","$df9a6d7fd06616c9$var$isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","isExtraRetryCode","isAdditionalRetryCode","$df9a6d7fd06616c9$var$NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve_","reject_","backoffDone","requestWentThrough","wasSuccessCode","getResponse","getErrorText","$df9a6d7fd06616c9$var$RequestEndStatus","doRequest","backoffCompleteCb","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","callWithDelay","millis","responseHandler","clearGlobalTimeout","waitMillis","stopped","stop","wasTimeout","$df9a6d7fd06616c9$var$start","backoffCallback","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","appDelete","$df9a6d7fd06616c9$var$stop","abort","getBlob","BlobBuilder1","BlobBuilder","WebKitBlobBuilder","bb","append","UNSUPPORTED_ENVIRONMENT","$df9a6d7fd06616c9$var$decodeBase64","encoded","polyFill","$df9a6d7fd06616c9$export$f22e7fe56db8ae03","RAW","BASE64","BASE64URL","DATA_URL","$df9a6d7fd06616c9$var$StringData","$df9a6d7fd06616c9$export$d80b9b5a2ccdd3e0","stringData","$df9a6d7fd06616c9$var$utf8Bytes_","$df9a6d7fd06616c9$var$base64Bytes_","dataUrl","$df9a6d7fd06616c9$var$DataURLParts","rest","$df9a6d7fd06616c9$var$percentEncodedBytes_","$df9a6d7fd06616c9$var$dataURLBytes_","Uint8Array","hasMinus","hasUnder","hasPlus","hasSlash","end","$df9a6d7fd06616c9$export$8deea8629ff0b8a7","elideCopy","blobType","data_","ArrayBuffer","byteLength","size_","type_","startByte","endByte","realBlob","sliced","blob","webkitSlice","mozSlice","buffer","blobby","uint8Arrays","finalLength","merged","uploadData","$df9a6d7fd06616c9$var$jsonObjectOrNull","$df9a6d7fd06616c9$var$lastComponent","$df9a6d7fd06616c9$var$noXform_","$df9a6d7fd06616c9$var$Mapping","server","local","writable","xform","$df9a6d7fd06616c9$var$mappings_","$df9a6d7fd06616c9$var$getMappings","mappings","nameMapping","_metadata","fullPath","$df9a6d7fd06616c9$var$xformPath","sizeMapping","$df9a6d7fd06616c9$var$fromResource","resource","mapping","defineProperty","_makeStorageReference","$df9a6d7fd06616c9$var$addRef","$df9a6d7fd06616c9$var$fromResourceString","resourceString","$df9a6d7fd06616c9$var$toResourceString","$df9a6d7fd06616c9$var$RequestInfo","handler","errorHandler","progressCallback","successCodes","$df9a6d7fd06616c9$var$handlerCheck","cndn","$df9a6d7fd06616c9$var$metadataHandler","text","$df9a6d7fd06616c9$var$downloadUrlHandler","tokens","alt","$df9a6d7fd06616c9$var$downloadUrlFromResourceString","_protocol","$df9a6d7fd06616c9$var$sharedErrorHandler","newErr","UNAUTHORIZED_APP","UNAUTHENTICATED","QUOTA_EXCEEDED","UNAUTHORIZED","$df9a6d7fd06616c9$var$objectErrorHandler","shared","OBJECT_NOT_FOUND","$df9a6d7fd06616c9$var$metadataForUpload_","metadataClone","$df9a6d7fd06616c9$var$determineContentType_","$df9a6d7fd06616c9$var$multipartUpload","boundary","genBoundary","metadata_","preBlobPart","postBlobPart","maxUploadRetryTime","requestInfo","$df9a6d7fd06616c9$var$textFactoryOverride","$df9a6d7fd06616c9$var$XhrConnection","sent_","xhr_","initXhr","errorCode_","sendPromise_","NETWORK_ERROR","setRequestHeader","statusText","getResponseHeader","upload","$df9a6d7fd06616c9$var$XhrTextConnection","responseType","$df9a6d7fd06616c9$var$newTextConnection","$df9a6d7fd06616c9$var$Reference","_service","_location","_newRef","storage","newPath","$df9a6d7fd06616c9$var$parent","_throwIfRoot","INVALID_ROOT_OPERATION","$df9a6d7fd06616c9$export$61f54cdc36500ad","makeRequestWithTokens","finalMetadata","maxOperationRetryTime","requestsGetDownloadUrl","NO_DOWNLOAD_URL","_getChild","canonicalChildPath","$df9a6d7fd06616c9$var$child","$df9a6d7fd06616c9$var$refFromPath","$df9a6d7fd06616c9$var$FirebaseStorageImpl","_bucket","NO_DEFAULT_BUCKET","reference","serviceOrRef","pathOrUrl","$df9a6d7fd06616c9$var$extractBucket","makeFromBucketSpec","_authProvider","_appCheckProvider","_url","_firebaseVersion","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","_overrideAuthToken","tokenData","_makeRequest","requestFactory","firebaseVersion","$df9a6d7fd06616c9$var$addGmpidHeader_","$df9a6d7fd06616c9$var$addAuthHeader_","$df9a6d7fd06616c9$var$addVersionHeader_","$df9a6d7fd06616c9$var$addAppCheckHeader_","$df9a6d7fd06616c9$var$makeRequest","_getAuthToken","_getAppCheckToken","$df9a6d7fd06616c9$var$STORAGE_TYPE","$df9a6d7fd06616c9$export$ac40f56b52f99dd1","uploadBytesInternal","$df9a6d7fd06616c9$export$c8bf645a0c2a7d9f","getDownloadURLInternal","$df9a6d7fd06616c9$export$eff4d24c3ff7876e","refInternal","$df9a6d7fd06616c9$export$fbd9b57a66480737","bucketUrl","storageInstance","connectEmulatorInternal","$df9a6d7fd06616c9$export$9850e656f954b889","$df9a6d7fd06616c9$var$factory","$df9a6d7fd06616c9$var$name","$df9a6d7fd06616c9$var$version"],"version":3,"file":"index.0ad464a1.js.map"}