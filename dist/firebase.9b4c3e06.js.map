{"mappings":"AAAA,MAAM,kBAAkB,OAAO,EAAC,SAAQ,EAAE,QAAO,EAAE,mBAAkB,EAAE,mBAAkB,EAAC,GAAK;IAC7F,IAAI,CAAC,cAAc,GAAG,IAAI;IAC1B,MAAM,aAAa,CAAC,YAAY,QAAQ,GAAK;QAC3C,IAAI,MAAM,IAAI;QACd,OAAO,IAAI,MAAM,CAAC;IACpB;IACA,MAAM,cAAc,OAAO,MAAM,OAAO,EAAE,QAAQ,QAAQ,EAAE,iBAAgB,IAAI,CAAC,cAAc,GAAK;QAClG,IAAI,UAAU,WAAW;QACzB,iBAAiB,MAAM,OAAO,MAAM,CAAC,OAAO,CAC1C;YACE,MAAM;QACR,GACA,KACA;QAEF,8BAA8B,YAAY,mBAAmB;QAC7D,OAAO,IAAI,WAAW,gBAAgB,GAAG;IAC3C;IACA,MAAM,cAAc,OAAO,MAAM,OAAO,EAAE,iBAAiB,IAAI,CAAC,cAAc,EAAE,kBAAoB;QAClG,IAAI,YAAY,MAAM,OAAO,MAAM,CAAC,OAAO,CACzC;YACE,MAAM;QACR,GACA,KACA;QAGF,MAAM,MAAM,IAAI;QAChB,8BAA8B,YAAY,mBAAmB,IAAI,MAAM,CAAC;QACxE,OAAO,IAAI,MAAM,CAAC;IACpB;IAEA,MAAM,eAAe,MAAM,OAAO,MAAM,CAAC,WAAW,CAClD;QACE,MAAM;QACN,eAAe;QACf,gBAAgB,IAAI,WAAW;YAAC;YAAG;YAAG;SAAE;QACxC,MAAM;IACR,GACA,IAAI,EACJ;QAAC;QAAW;KAAU,EACtB,IAAI,CAAC,CAAC,UAAY;IAEpB,OAAO;QACL,gBAAgB,IAAI,CAAC,cAAc;QACnC,aAAa,YAAY,SAAS,UAAU,IAAI,CAAC,cAAc;QAC/D,aAAa,YAAY,SAAS,UAAU,IAAI,CAAC,cAAc;QAC/D,cAAc;IAChB;AACF","sources":["js/helpers.js"],"sourcesContent":["const createCryptoKey = async ({keyValue, keyName, encryptKeyCallback, decryptKeyCallback}) => {\r\n  this.encodedContent = null;\r\n  const encodeItem = (itemValue = keyValue) => {\r\n    let enc = new TextEncoder();\r\n    return enc.encode(itemValue);\r\n  }\r\n  const encryptItem = async (key = keyName, value = keyValue, encodedContent= this.encodedContent) => {\r\n    let encoded = encodeItem(value);\r\n    encodedContent = await crypto.subtle.encrypt(\r\n      {\r\n        name: \"RSA-OAEP\"\r\n      },\r\n      key,\r\n      encoded\r\n    );\r\n    encryptKeyCallback instanceof Function && encryptKeyCallback(encodedContent)\r\n    return new Uint8Array(encodedContent, 0, 5);\r\n  }\r\n  const decryptItem = async (key = keyName, encodedContent = this.encodedContent, encodedContent1) => {\r\n    let decrypted = await crypto.subtle.decrypt(\r\n      {\r\n        name: \"RSA-OAEP\"\r\n      },\r\n      key,\r\n      encodedContent\r\n    );\r\n\r\n    const dec = new TextDecoder();\r\n    decryptKeyCallback instanceof Function && decryptKeyCallback(dec.decode(decrypted))\r\n    return dec.decode(decrypted);\r\n  }\r\n\r\n  const generatedKey = await crypto.subtle.generateKey(\r\n    {\r\n      name: \"RSA-OAEP\",\r\n      modulusLength: 2048,\r\n      publicExponent: new Uint8Array([1, 0, 1]),\r\n      hash: \"SHA-256\",\r\n    },\r\n    true,\r\n    [\"encrypt\", \"decrypt\"]\r\n  ).then((keyPair) => keyPair)\r\n\r\n  return {\r\n    encodedContent: this.encodedContent,\r\n    encryptItem: encryptItem(keyName, keyValue, this.encodedContent),\r\n    decryptItem: decryptItem(keyName, keyValue, this.encodedContent),\r\n    generatedKey: generatedKey\r\n  };\r\n}\r\n"],"names":[],"version":3,"file":"firebase.9b4c3e06.js.map","sourceRoot":"/__parcel_source_root/"}