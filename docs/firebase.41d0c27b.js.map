{"mappings":"AAAA,MAAM,aAAa,CAAC,EACE,QAAS,aAAY,EACrB,iBAAkB,EAAC,EACnB,eAAgB;IACd,mBAAmB,IAAI;IACvB,UAAU,CAAC,QAAU,QAAQ,GAAG,CAAC;AACnC,EAAC,EACD,iBAAkB;IAChB,oBAAoB,IAAI;IACxB,UAAU,CAAC,QAAU,QAAQ,GAAG,CAAC;AACnC,EAAC,EACD,gBAAiB;IACf,oBAAoB,IAAI;IACxB,UAAU,CAAC,QAAU,QAAQ,GAAG,CAAC;AACnC,EAAC,EACD,uBAAwB;IACtB;QAAC,MAAM;QAAc,SAAS;QAAO,UAAU;YAAC;gBAC5C,UAAU;gBACV,SAAS;gBACT,SAAS;oBACP,QAAQ,KAAK;gBACf;YACF;YAAG;gBACD,UAAU;gBACV,SAAS;gBACT,SAAS;oBACP,QAAQ,IAAI;oBACZ,YAAY,IAAI;gBAClB;YACF;SAAE;IAAA;CACL,CAAA,EACD,sBAAuB;IACrB;QAAC,MAAM;QAAc,UAAU;YAAC;gBAAC,UAAU;gBAAiB,OAAO;YAAoB;SAAE;IAAA;CAC1F,CAAA,EACF,GAAK;IACxB,MAAM,sBAAsB,CAAC,OAAO,MAAM,EAAE,UAAU,eAAe,GAAK,UAAU,IAAI,CAAC,MAAM;IAC/F,MAAM,gBAAgB;QACpB,iBAAiB,IAAI;QACrB,UAAU,IAAI;QACd,eAAe,oBAAoB,QAAQ;IAC7C;IACA,IAAI,EAAC,SAAQ,EAAE,gBAAe,EAAE,cAAa,EAAC,GAAG;IAEjD,cAAc,gBAAgB,CAAC,SAAS,CAAA,QAAS;QAC/C,cAAc,QAAQ,YAAY,YAAY,cAAc,QAAQ,CAAC;QACrE,OAAO,YAAY;IACrB;IAEA,cAAc,gBAAgB,CAAC,WAAW,CAAA,QAAS;QACjD,gBAAgB,QAAQ,YAAY,YAAY,gBAAgB,QAAQ,CAAC;QACzE,OAAO,WAAW,oBAAoB,MAAM;IAC9C;IAEA,cAAc,gBAAgB,CAAC,iBAAiB,CAAC,QAAU;QACzD,MAAM,KAAK,MAAM,MAAM,CAAC,MAAM;QAC9B,kBAAkB,MAAM,UAAU;QAElC,MAAM,oBAAoB,sBAAsB,GAAG,CAAC,CAAC,OAAS;YAC5D,IAAI,UAAU,GAAG,iBAAiB,CAAC,KAAK,IAAI,EAAE;gBAAC,SAAS,KAAK,OAAO,GAAG,KAAK,OAAO,GAAG,KAAK;YAAA;YAC3F,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAS;gBAC9B,KAAK,QAAQ,KAAK,MAAM,QAAQ,WAAW,CAAC,KAAK,QAAQ,EAAE,KAAK,OAAO,IAAI,CAAC,MAAM,EAAE,KAAK,QAAQ,CAAC,CAAC,EAAE,KAAK,OAAO;YACnH;YACA,OAAO;QACT;QAEA,MAAM,iBAAiB,kBAAkB,MAAM,CAAC,CAAC,OAAS,qBAAqB,IAAI,CAAC,CAAC,aAAe,WAAW,IAAI,KAAK,KAAK,IAAI,GAC9H,GAAG,CAAC,CAAC,OAAS;YACb,MAAM,aAAa,qBAAqB,IAAI,CAAC,CAAC,UAAY,QAAQ,IAAI,KAAK,KAAK,IAAI;YACpF,KAAK,WAAW,CAAC,gBAAgB,CAAC,YAAY,CAAA,QAAS;gBACnD,MAAM,eAAe,SAAS,WAAW,CAAC,KAAK,IAAI,EAAE,aAAa,WAAW,CAAC,KAAK,IAAI;gBACvF,eAAe,QAAQ,YAAY,YAAY,eAAe,QAAQ,CAAC;gBACvE,WAAW,QAAQ,CAAC,MAAM,GAAG,KAAK,WAAW,QAAQ,CAAC,OAAO,CAAC,CAAC,YAC7D,aAAa,GAAG,CAAC;YAErB;QAEJ;IACJ;AACF","sources":["js/indexDBforFuture.js"],"sourcesContent":["const NewNamedDB = ({\r\n                      dbName = 'templateDB',\r\n                      dbVersionNumber = 1,\r\n                      errorCallback = {\r\n                        useErrorParameter: true,\r\n                        callback: (event) => console.dir(event)\r\n                      },\r\n                      successCallback = {\r\n                        useResultParameter: true,\r\n                        callback: (event) => console.dir(event),\r\n                      },\r\n                      updateCallback = {\r\n                        useUpdateParameter: true,\r\n                        callback: (event) => console.dir(event),\r\n                      },\r\n                      dataBaseObjectsCreate = [\r\n                        {name: \"authorData\", keyPath: \"ssn\", children: [{\r\n                            property: \"fullName\",\r\n                            keyPath: \"name\",\r\n                            options: {\r\n                              unique: false\r\n                            }\r\n                          }, {\r\n                            property: \"email\",\r\n                            keyPath: \"email\",\r\n                            options: {\r\n                              unique: true,\r\n                              multiEntry: true\r\n                            }\r\n                          }]}\r\n                      ],\r\n                      dataBaseObjectsItems = [\r\n                        {name: \"authorData\", children: [{fullName: 'Oleh Hrechukh', email: 'dimeloss@gmail.com'}]}\r\n                      ]\r\n                    }) => {\r\n  const requestOpenDataBase = (name = dbName, version = dbVersionNumber) => indexedDB.open(name, version);\r\n  const dataBaseItems = {\r\n    previousVersion: null,\r\n    dataBase: null,\r\n    requestResult: requestOpenDataBase(dbName, dbVersionNumber)\r\n  };\r\n  let {dataBase, previousVersion, requestResult} = dataBaseItems\r\n\r\n  requestResult.addEventListener('error', error => {\r\n    errorCallback.callback instanceof Function && errorCallback.callback(error)\r\n    return reportError(error)\r\n  })\r\n\r\n  requestResult.addEventListener('success', event => {\r\n    successCallback.callback instanceof Function && successCallback.callback(event)\r\n    return dataBase = requestOpenDataBase.result\r\n  })\r\n\r\n  requestResult.addEventListener('upgradeneeded', (event) => {\r\n    const db = event.target.result;\r\n    previousVersion = event.oldVersion\r\n\r\n    const storageContainers = dataBaseObjectsCreate.map((item) => {\r\n      let storage = db.createObjectStore(item.name, {keyPath: item.keyPath ? item.keyPath : 'ssn'});\r\n      item.children.forEach((item) => {\r\n        item.property !== \"\" && storage.createIndex(item.property, item.keyPath || `value_${item.property}`, item.options)\r\n      })\r\n      return storage\r\n    })\r\n\r\n    const mappedStorages = storageContainers.filter((item) => dataBaseObjectsItems.some((collection) => collection.name === item.name))\r\n      .map((item) => {\r\n        const itemsToAdd = dataBaseObjectsItems.find((element) => element.name === item.name)\r\n        item.transaction.addEventListener('complete', event => {\r\n            const storeElement = dataBase.transaction(item.name, \"readwrite\").objectStore(item.name);\r\n            updateCallback.callback instanceof Function && updateCallback.callback(event)\r\n            itemsToAdd.children.length > 0 && itemsToAdd.children.forEach((childNode) =>\r\n              storeElement.add(childNode)\r\n            )\r\n          }\r\n        )\r\n      })\r\n  })\r\n}\r\n"],"names":[],"version":3,"file":"firebase.41d0c27b.js.map","sourceRoot":"/__parcel_source_root/"}