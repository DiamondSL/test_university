{"mappings":"AAAA,MAAMA,WAAa,EACGC,SAAS,aACTC,kBAAkB,EAClBC,gBAAgB,CACdC,mBAAmB,EACnBC,SAAWC,GAAUC,QAAQC,IAAIF,IAEnCG,kBAAkB,CAChBC,oBAAoB,EACpBL,SAAWC,GAAUC,QAAQC,IAAIF,IAEnCK,iBAAiB,CACfC,oBAAoB,EACpBP,SAAWC,GAAUC,QAAQC,IAAIF,IAEnCO,wBAAwB,CACtB,CAACC,KAAM,aAAcC,QAAS,MAAOC,SAAU,CAAC,CAC5CC,SAAU,WACVF,QAAS,OACTG,QAAS,CACPC,QAAQ,IAET,CACDF,SAAU,QACVF,QAAS,QACTG,QAAS,CACPC,QAAQ,EACRC,YAAY,OAIpBC,uBAAuB,CACrB,CAACP,KAAM,aAAcE,SAAU,CAAC,CAACM,SAAU,gBAAiBC,MAAO,6BAGzF,MAAMC,EAAsB,CAACV,EAAOb,EAAQwB,EAAUvB,IAAoBwB,UAAUC,KAAKb,EAAMW,GACzFG,EAAgB,CACpBC,gBAAiB,KACjBC,SAAU,KACVC,cAAeP,EAAoBvB,EAAQC,IAE7C,IAAI4B,SAACA,EAAQD,gBAAEA,EAAeE,cAAEA,GAAiBH,EAEjDG,EAAcC,iBAAiB,SAASC,IACtC9B,EAAcE,oBAAoB6B,UAAY/B,EAAcE,SAAS4B,GAC9DE,YAAYF,MAGrBF,EAAcC,iBAAiB,WAAW1B,IACxCG,EAAgBJ,oBAAoB6B,UAAYzB,EAAgBJ,SAASC,GAClEwB,EAAWN,EAAoBY,UAGxCL,EAAcC,iBAAiB,iBAAkB1B,IAC/C,MAAM+B,EAAK/B,EAAMgC,OAAOF,OACxBP,EAAkBvB,EAAMiC,WAEE1B,EAAsB2B,KAAKC,IACnD,IAAIC,EAAUL,EAAGM,kBAAkBF,EAAK3B,KAAM,CAACC,QAAS0B,EAAK1B,QAAU0B,EAAK1B,QAAU,QAItF,OAHA0B,EAAKzB,SAAS4B,SAASH,IACH,KAAlBA,EAAKxB,UAAmByB,EAAQG,YAAYJ,EAAKxB,SAAUwB,EAAK1B,SAAW,SAAS0B,EAAKxB,WAAYwB,EAAKvB,QAAO,IAE5GwB,CAAA,IAGgCI,QAAQL,GAASpB,EAAqB0B,MAAMC,GAAeA,EAAWlC,OAAS2B,EAAK3B,SAC1H0B,KAAKC,IACJ,MAAMQ,EAAa5B,EAAqB6B,MAAMC,GAAYA,EAAQrC,OAAS2B,EAAK3B,OAChF2B,EAAKW,YAAYpB,iBAAiB,YAAY1B,IAC1C,MAAM+C,EAAevB,EAASsB,YAAYX,EAAK3B,KAAM,aAAawC,YAAYb,EAAK3B,MACnFH,EAAeN,oBAAoB6B,UAAYvB,EAAeN,SAASC,GACvE2C,EAAWjC,SAASuC,OAAS,GAAKN,EAAWjC,SAAS4B,SAASY,GAC7DH,EAAaI,IAAID,IAAA,GAErB,GAEJ,GACJ","sources":["js/indexDBforFuture.js"],"sourcesContent":["const NewNamedDB = ({\r\n                      dbName = 'templateDB',\r\n                      dbVersionNumber = 1,\r\n                      errorCallback = {\r\n                        useErrorParameter: true,\r\n                        callback: (event) => console.dir(event)\r\n                      },\r\n                      successCallback = {\r\n                        useResultParameter: true,\r\n                        callback: (event) => console.dir(event),\r\n                      },\r\n                      updateCallback = {\r\n                        useUpdateParameter: true,\r\n                        callback: (event) => console.dir(event),\r\n                      },\r\n                      dataBaseObjectsCreate = [\r\n                        {name: \"authorData\", keyPath: \"ssn\", children: [{\r\n                            property: \"fullName\",\r\n                            keyPath: \"name\",\r\n                            options: {\r\n                              unique: false\r\n                            }\r\n                          }, {\r\n                            property: \"email\",\r\n                            keyPath: \"email\",\r\n                            options: {\r\n                              unique: true,\r\n                              multiEntry: true\r\n                            }\r\n                          }]}\r\n                      ],\r\n                      dataBaseObjectsItems = [\r\n                        {name: \"authorData\", children: [{fullName: 'Oleh Hrechukh', email: 'dimeloss@gmail.com'}]}\r\n                      ]\r\n                    }) => {\r\n  const requestOpenDataBase = (name = dbName, version = dbVersionNumber) => indexedDB.open(name, version);\r\n  const dataBaseItems = {\r\n    previousVersion: null,\r\n    dataBase: null,\r\n    requestResult: requestOpenDataBase(dbName, dbVersionNumber)\r\n  };\r\n  let {dataBase, previousVersion, requestResult} = dataBaseItems\r\n\r\n  requestResult.addEventListener('error', error => {\r\n    errorCallback.callback instanceof Function && errorCallback.callback(error)\r\n    return reportError(error)\r\n  })\r\n\r\n  requestResult.addEventListener('success', event => {\r\n    successCallback.callback instanceof Function && successCallback.callback(event)\r\n    return dataBase = requestOpenDataBase.result\r\n  })\r\n\r\n  requestResult.addEventListener('upgradeneeded', (event) => {\r\n    const db = event.target.result;\r\n    previousVersion = event.oldVersion\r\n\r\n    const storageContainers = dataBaseObjectsCreate.map((item) => {\r\n      let storage = db.createObjectStore(item.name, {keyPath: item.keyPath ? item.keyPath : 'ssn'});\r\n      item.children.forEach((item) => {\r\n        item.property !== \"\" && storage.createIndex(item.property, item.keyPath || `value_${item.property}`, item.options)\r\n      })\r\n      return storage\r\n    })\r\n\r\n    const mappedStorages = storageContainers.filter((item) => dataBaseObjectsItems.some((collection) => collection.name === item.name))\r\n      .map((item) => {\r\n        const itemsToAdd = dataBaseObjectsItems.find((element) => element.name === item.name)\r\n        item.transaction.addEventListener('complete', event => {\r\n            const storeElement = dataBase.transaction(item.name, \"readwrite\").objectStore(item.name);\r\n            updateCallback.callback instanceof Function && updateCallback.callback(event)\r\n            itemsToAdd.children.length > 0 && itemsToAdd.children.forEach((childNode) =>\r\n              storeElement.add(childNode)\r\n            )\r\n          }\r\n        )\r\n      })\r\n  })\r\n}\r\n"],"names":["NewNamedDB","dbName","dbVersionNumber","errorCallback","useErrorParameter","callback","event","console","dir","successCallback","useResultParameter","updateCallback","useUpdateParameter","dataBaseObjectsCreate","name","keyPath","children","property","options","unique","multiEntry","dataBaseObjectsItems","fullName","email","requestOpenDataBase","version","indexedDB","open","dataBaseItems","previousVersion","dataBase","requestResult","addEventListener","error","Function","reportError","result","db","target","oldVersion","map","item","storage","createObjectStore","forEach","createIndex","filter","some","collection","itemsToAdd","find","element","transaction","storeElement","objectStore","length","childNode","add"],"version":3,"file":"firebase.14f80899.js.map"}